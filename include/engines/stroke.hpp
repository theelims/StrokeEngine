/**
 *   StrokeEngine
 *   A library to create a variety of stroking motions with a stepper or servo motor on an ESP32.
 *   https://github.com/theelims/StrokeEngine 
 *
 * Copyright (C) 2022 theelims <elims@gmx.net>
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 */

#pragma once
#ifndef STROKE_ENGINE_H
#define STROKE_ENGINE_H

#include "engine.hpp"
#include <pattern.h>

enum class StrokeParameter {
  // RATE - Range 0.5 to 6000 Strokes / Min
  // Can allow better control typically than just SPEED, as other machines use
  RATE,

  // DEPTH - Range is constrainted by motionBounds from MotorInterface
  // Is the point at which the stroke ends
  DEPTH, 

  // STROKE - Range is constrainted by motionBounds from MotorInterface
  // How far the stroke will retract from DEPTH point
  STROKE, 

  // SENSATION - Range is -100 to 100
  // Serves as a generic parameter for usage by patterns to adjust sensation
  SENSATION,

  PATTERN
};

class StrokeEngineListener {
  public:
    virtual void engine_parameterUpdated(StrokeParameter parameter, float value);
};

/**************************************************************************/
/*!
  @brief  Stroke Engine provides a convenient package for stroking motions
  created by stepper or servo motors. It's internal states are handled by a 
  finite state machine. A pattern generator allows to creat a variety of 
  motion profiles.
*/
/**************************************************************************/
class StrokeEngine : public Engine {
    public:
        StrokeEngine();
        void attachMotor(MotorInterface *motor);

        // TODO - Add a more robust event system
        void registerListener(StrokeEngineListener* listener) {
          if (this->listenerCount < 10) {
            this->listeners[this->listenerCount] = listener; // TODO - Doesn't allow additional listeners
            this->listenerCount++;
          } else {
            ESP_LOGE("stroke", "Unable to register listener due to max count reached!");
          }
        }

        /*!
          @brief Sets an internal Pattern Parameter. Takes effect on next stroke unless applyNow isused
          @param value See StrokeParameter documentation for constraints placed on value
          @param applyNow Set to true if changes should take effect immediately 
        */
        void setParameter(StrokeParameter parameter, float value, bool applyNow = false);
        float getParameter(StrokeParameter parameter);

        /*!
          @brief  Starts the internal motion loop which feeds Movements generated by the Pattern to the attached Motor
          @return if True, indicates Pattern has started successfully
        */
        bool startPattern();

        /*! @brief Stops Pattern execution, and instructs the motor to immediately stop motion */
        void stopPattern();

        /*!
          @brief  Allows fetching Pattern names for UIs
          @param index index of a pattern.
          @return String holding a pattern name with a certain index. If index is 
                        out of range it returns "Invalid"
        */
        String getPatternName(int index);

        /*!
          @brief  Allows fetching Pattern names for UIs without going out of bounds
          @return The number of patterns available.
        */
        unsigned int getNumberOfPattern() { 
          return patternTableSize; 
        };
    protected:
      StrokeEngineListener** listeners;
      int listenerCount = 0;

      int _patternIndex = 0;
      int _index = 0;

      float maxDepth;
      float depth;
      float stroke;
      float strokeRate;
      float sensation;

      bool applyUpdate = false;

      SemaphoreHandle_t _parameterMutex = xSemaphoreCreateMutex();
      void sendParameters(int patternIndex);

      void _stroking();
};

#endif
